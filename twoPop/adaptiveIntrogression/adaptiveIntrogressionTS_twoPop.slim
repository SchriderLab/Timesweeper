initialize()
{
	defineConstant("subpopCount", 2);
	defineConstant("subpopSize", 500);
	defineConstant("mutLoc", 50000);
	defineConstant("selCoeff", 0.05);
	
	//times
	defineConstant("burnTime", 20*subpopSize);
	defineConstant("splitTime", burnTime);
	defineConstant("mutTime", burnTime);
	defineConstant("migTime", burnTime+2*subpopSize);
	defineConstant("simEndTime", migTime+samplingInterval*numSamples);

	initializeMutationRate(1e-7);
	initializeMutationType("m1", 0.5, "f", 0.0);
	initializeMutationType("m2", 0.5, "f", selCoeff);    // introduced mutation
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, 99999);
	initializeRecombinationRate(1e-7);
}

s1 500
{
	sim.addSubpopSplit("p2", subpopSize, p1);
	for (i in 2:subpopCount)
		sim.subpopulations[i-1].setMigrationRates(i-1, 0.0);
	for (i in 1:(subpopCount-1))
		sim.subpopulations[i-1].setMigrationRates(i+1, 0.0);
}

s2 1000 late()
{
	if (sweep == "hard")
	{
		// save the state of the simulation	
		cat("SAVING TO " + dumpFileName + "\n");
		sim.outputFull(dumpFileName);
	
		// introduce the sweep mutation
		target = sample(p1.genomes, 1);
		cat("INTRODUCED MUTATION at gen " + sim.generation + " with 2Ns = " + 2*subpopSize*selCoeff + "\n");
		target.addNewDrawnMutation(m2, mutLoc);
	}
}

s3 1000:10000 late()
{
	if (sweep == "hard")
	{
		fixed = (sum(sim.substitutions.mutationType == m2) == 1);
		
		if (fixed)
		{
			cat(simID + ": FIXED at gen " + sim.generation + "\n");
			sim.deregisterScriptBlock(self);
		}
		else
		{
			muts = sim.mutationsOfType(m2);
			if (size(muts) == 0)
			{
				cat(simID + ": LOST at gen " + sim.generation + " - RESTARTING\n");
			
				// go back with a newly seeded attempt
				sim.readFromPopulationFile(dumpFileName);
				setSeed(rdunif(1, 0, asInteger(2^32) - 1));
			
				// re-introduce the sweep mutation
				target = sample(p1.genomes, 1);
				target.addNewDrawnMutation(m2, mutLoc);
			}
		}
	}
	else
	{
		sim.deregisterScriptBlock(self);
	}
}

s4 10000 late()
{
	cat("ALLOWING MIGRATION - " + sim.generation + "\n");
	for (i in 2:subpopCount)
		sim.subpopulations[i-1].setMigrationRates(i-1, 0.001);
	for (i in 1:(subpopCount-1))
		sim.subpopulations[i-1].setMigrationRates(i+1, 0.001);
}

s5 10000:15000 late()
{
	if (sweep == "hard")
	{
		if (sim.countOfMutationsOfType(m2) == 0)
		{
			fixed = (sum(sim.substitutions.mutationType == m2) == 1);
			if (fixed)
			{
				cat(simID + ": FIXED at gen " + sim.generation + "\n");
				sim.deregisterScriptBlock(self);
			}
		}
	}
}

s6 10000:15000 late()
{
	if (sim.generation % samplingInterval == 0)
	{
		if (sweep == "hard")
		{
			muts = sim.mutationsOfType(m2);
			if (size(muts) > 0)
			{
				freq1 = sim.mutationFrequencies(p1, muts)[0];
				freq2 = sim.mutationFrequencies(p2, muts)[0];
				cat("SEGREGATING IN p1 AND p2 at " + freq1 + " and " + freq2 + " respectively\n");
			}
			else
			{
				freq = "NO LONGER SEGREGATING at generation " + sim.generation + "; size(muts) == " + size(muts) + "\n";
			}
		}
	
		cat("Sampling at generation " + sim.generation + "\n");
		pop1SampGenomes = sample(p1.genomes, sampleSizePerStep1);
		pop2SampGenomes = sample(p2.genomes, sampleSizePerStep2);
		fullSamp = c(pop1SampGenomes, pop2SampGenomes);
		fullSamp.output();
		cat("Done emitting sample\n");
	}
}

s7 15000 late()
{
	sim.simulationFinished();
}

1 {
	// save this run's identifier, used to save and restore
	defineConstant("simID", getSeed());
	
	// set up our subpop
	sim.addSubpop("p1", subpopSize);

	//schedule our events
	sim.rescheduleScriptBlock(s1, start=splitTime, end=splitTime); //  splitting pop
	sim.rescheduleScriptBlock(s2, start=mutTime, end=mutTime); //  introducing mut
	sim.rescheduleScriptBlock(s3, start=mutTime, end=simEndTime); // checking on mut in p1
	sim.rescheduleScriptBlock(s4, start=migTime, end=migTime); // allowing mig
	sim.rescheduleScriptBlock(s5, start=migTime, end=simEndTime); // reporting on fixation
	sim.rescheduleScriptBlock(s6, start=migTime+1, end=simEndTime); // sampling
	sim.rescheduleScriptBlock(s7, start=simEndTime, end=simEndTime); // wrapping up
}
